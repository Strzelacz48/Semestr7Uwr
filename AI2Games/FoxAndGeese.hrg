// Domains
domain Piece = foxpawn | empty | geesepawn | null
domain Player = fox | geese
domain Score = 0 | 50 | 100
domain Position = null | V(X, Y) where X in 0..6, Y in { 0, 1, 2, 3, 4, 5, 6 }
domain Count = C(X) where X in 0..401

// Helpers
left : Position -> Position
left(null) = null
left(V(2,0)) = null
left(V(2,1)) = null
left(V(2,5)) = null
left(V(2,6)) = null
left(V(X, Y)) = if X == 0 then null else V(X - 1, Y)

right : Position -> Position
right(null) = null
right(V(4,0)) = null
right(V(4,1)) = null
right(V(4,5)) = null
right(V(4,6)) = null
right(V(X, Y)) = if X == 6 then null else V(X + 1, Y)

up : Position -> Position
up(null) = null
up(V(_, 0)) = null
up(V(0, 2)) = null
up(V(1, 2)) = null
up(V(5, 2)) = null
up(V(6, 2)) = null
up(V(X, Y)) = V(X, Y - 1)

down : Position -> Position
down(null) = null
down(V(_, 6)) = null
down(V(0, 4)) = null
down(V(1, 4)) = null
down(V(5, 4)) = null
down(V(6, 4)) = null
down(V(X, Y)) = V(X, Y + 1)

upleft : Position -> Position
upleft(null) = null
upleft(V(3, 1)) = V(2, 0)
upleft(V(4, 2)) = V(3, 1)
upleft(V(5, 3)) = V(4, 2)
upleft(V(6, 4)) = V(5, 3)
upleft(V(3, 3)) = V(2, 2)
upleft(V(4, 4)) = V(3, 3)
upleft(V(1, 3)) = V(0, 2)
upleft(V(2, 4)) = V(1, 3)
upleft(V(3, 5)) = V(2, 4)
upleft(V(4, 6)) = V(3, 5)
upleft(V(X, Y)) = null

upright : Position -> Position
upright(null) = null
upright(V(0, 4)) = V(1, 3)
upright(V(1, 3)) = V(2, 2)
upright(V(2, 2)) = V(3, 1)
upright(V(3, 1)) = V(4, 0)
upright(V(2, 4)) = V(3, 3)
upright(V(3, 3)) = V(4, 2)
upright(V(2, 6)) = V(3, 5)
upright(V(3, 5)) = V(4, 4)
upright(V(4, 4)) = V(5, 3)
upright(V(5, 3)) = V(6, 2)
upright(V(X, Y)) = null

downleft : Position -> Position
downleft(null) = null
downleft(V(1, 3)) = V(0, 4)
downleft(V(2, 2)) = V(1, 3)
downleft(V(3, 1)) = V(2, 2)
downleft(V(4, 0)) = V(3, 1)
downleft(V(3, 3)) = V(2, 4)
downleft(V(4, 2)) = V(3, 3)
downleft(V(3, 5)) = V(2, 6)
downleft(V(4, 4)) = V(3, 5)
downleft(V(5, 3)) = V(4, 4)
downleft(V(6, 2)) = V(5, 3)
downleft(V(X, Y)) = null

downright : Position -> Position
downright(null) = null
downright(V(2, 0)) = V(3, 1)
downright(V(3, 1)) = V(4, 2)
downright(V(4, 2)) = V(5, 3)
downright(V(5, 3)) = V(6, 4)
downright(V(2, 2)) = V(3, 3)
downright(V(3, 3)) = V(4, 4)
downright(V(0, 2)) = V(1, 3)
downright(V(1, 3)) = V(2, 4)
downright(V(2, 4)) = V(3, 5)
downright(V(3, 5)) = V(4, 6)
downright(V(X, Y)) = null


piece : Player -> Piece
piece(geese) = geesepawn
piece(_) = foxpawn

opponent : Player -> Player
opponent(geese) = fox
opponent(_) = geese

increase_count : Count -> Count
increase_count(C(X)) = if X < 400 then C(X+1) else C(X) //t

compare : Count -> Score
compare(C(A)) = if A < 400 then 0 else 50

// Variables
board : Position -> Piece = {
  //V(X, Y) = if V(X, Y) == V(3, 2)
    //then foxpawn else 
  V(X, Y) = if Y == 4
    then geesepawn
    else if V(X,Y) == V(2, 5)
      then geesepawn
      else if V(X,Y) == V(3, 5)
        then geesepawn
        else if V(X,Y) == V(4, 5)
          then geesepawn
          else if V(X,Y) == V(2, 6)
            then geesepawn
            else if V(X,Y) == V(3, 6)
              then geesepawn
              else if V(X,Y) == V(4, 6)
                then geesepawn
                else if X < 2 && Y < 2
                  then null
                  else if X < 2 && Y > 5
                    then null
                    else if X > 5 && Y < 2
                      then null
                      else if X > 5 && Y > 5
                        then null
                        else empty
      
  where X in 0..6, Y in 0..6
}

me : Player = fox

position : Position
temp : Position

graph canMoveGeese(){
  forall p:Position {
    check(p != null && board[p] == geesepawn)
  }
}

graph moveGeese(){
  forall p:Position {
    check(p != null && board[p] == geesepawn)
    board[p] = empty
    position = p 
    $ p
  }
  branch{
    check(board[up(position)] == empty)
    position = up(position)
    $U
  } or {
    check(board[left(position)] == empty)
    position = left(position)
    $L
  } or {
    check(board[right(position)] == empty)
    position = right(position)
    $R
  } or {
    check(board[down(position)] == empty)
    position = down(position)
    $D
  } or {
    check(board[upleft(position)] == empty)
    position = upleft(position)
    $UL
  } or {
    check(board[upright(position)] == empty)
    position = upright(position)
    $UR
  } or {
    check(board[downleft(position)] == empty)
    position = downleft(position)
    $DL
  } or {
    check(board[downright(position)] == empty)
    position = downright(position)
    $DR
  }
}
  

graph turnGeese(){
  player = geese

  moveGeese()

  board[position] = geesepawn
  player = keeper
  if not(reachable(moveFox())){// lis nie moze sie ruszyc
    goals[geese] = 100
    goals[fox] = 0
    end()
  }
}

graph moveFox(){// ruszamy lisem o 1 pole lub zbijamy ges(1 na ture maks)
  forall p:Position {
    check(p != null && board[p] == foxpawn)
    board[p] = empty
    position = p 
    temp = p
    $ p
  }
  branch{
    check(board[up(position)] == empty)
    position = up(position)
    $U
  } or {
    check(board[up(position)] == geesepawn && board[up(up(position))] == empty)
    position = up(up(position))
    board[down(position)] = empty
    $UU
  } or{
    check(board[left(position)] == empty)
    position = left(position)
    $L
  } or {
    check(board[left(position)] == geesepawn && board[left(left(position))] == empty)
    position = left(left(position))
    board[right(position)] = empty
    $LL
  } or {
    check(board[right(position)] == empty)
    position = right(position)
    $R
  } or {
    check(board[right(position)] == geesepawn && board[right(right(position))] == empty)
    position = right(right(position))
    board[left(position)] = empty
    $RR
  } or {
    check(board[down(position)] == empty)
    position = down(position)
    $D
  } or {
    check(board[down(position)] == geesepawn && board[down(down(position))] == empty)
    position = down(down(position))
    board[up(position)] = empty
    $DD
  } or {
    check(board[upleft(position)] == empty)
    position = upleft(position)
    $UL
  } or {
    check(board[upleft(position)] == geesepawn && board[upleft(upleft(position))] == empty)
    position = upleft(upleft(position))
    board[downright(position)] = empty
    $ ULUL
  } or {
    check(board[upright(position)] == empty)
    position = upright(position)
    $UR
  } or {
    check(board[upright(position)] == geesepawn && board[upright(upright(position))] == empty)
    position = upright(upright(position))
    board[downleft(position)] = empty
    $URUR
  } or{
    check(board[downleft(position)] == empty)
    position = downleft(position)
    $DL
  } or{
    check(board[downleft(position)] == geesepawn && board[downleft(downleft(position))] == empty)
    position = downleft(downleft(position))
    board[upright(position)] = empty
    $DLDL
  } or {
    check(board[downright(position)] == empty)
    position = downright(position)
    $DR
  } or {
    check(board[downright(position)] == geesepawn && board[downright(downright(position))] == empty)
    position = downright(downright(position))
    board[upleft(position)] = empty
    $DRDR
  }
}

graph turnFox(){
  player = fox
  //temp = position
  moveFox()
  board[position] = foxpawn
  player = keeper

  if not(reachable(canMoveGeese())){// gesi nie maja pionkow
    goals[fox] = 100
    goals[geese] = 0
    end()
  }
}

countTurn : Count = C(0)

graph rules() {
  player = fox
  forall p:Position{
    check(p != null && board[p] == empty)
    $ p
    player = keeper
    board[p] = foxpawn
  }
  loop {
    if compare(countTurn) == 50{
      end()
    }
    turnGeese()
    countTurn = increase_count(countTurn)
    if compare(countTurn) == 50{ 
      end()
    }
    turnFox()
    countTurn = increase_count(countTurn)
  }
}