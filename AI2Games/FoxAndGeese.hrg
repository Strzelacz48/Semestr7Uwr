
// Moves form: Position (F + L + R)

// Domains
domain Piece = foxpawn | empty | geesepawn
domain Player = fox | geese
domain Score = 0 | 100
domain Position = null | V(X, Y) where X in 0..6, Y in { 0, 1, 2, 3, 4, 5, 6 }

// Helpers
left : Position -> Position
left(null) = null
left(V(2,0)) = null
left(V(2,1)) = null
left(V(2,5)) = null
left(V(2,6)) = null
left(V(X, Y)) = if X == 0 then null else V(X - 1, Y)

right : Position -> Position
right(null) = null
right(V(4,0)) = null
right(V(4,1)) = null
right(V(4,5)) = null
right(V(4,6)) = null
right(V(X, Y)) = if X == 6 then null else V(X + 1, Y)

up : Position -> Position
up(null) = null
up(V(_, 0)) = null
up(V(0, 2)) = null
up(V(1, 2)) = null
up(V(5, 2)) = null
up(V(6, 2)) = null
up(V(X, Y)) = V(X, Y - 1)

down : Position -> Position
down(null) = null
down(V(_, 6)) = null
down(V(0, 4)) = null
down(V(1, 4)) = null
down(V(5, 4)) = null
down(V(6, 4)) = null
down(V(X, Y)) = V(X, Y + 1)

direction : Player -> Position -> Position
direction(geese) = up
direction(_) = down

piece : Player -> Piece
piece(geese) = geesepawn
piece(_) = foxpawn

opponent : Player -> Player
opponent(geese) = fox
opponent(_) = geese


// Variables
board : Position -> Piece = {
  V(X, Y) = if V(X, Y) == V(3, 2)
    then foxpawn
    else if V(X,Y) == V(_, 4)
      then geesepawn
      else if V(X,Y) == V(2, 5)
        then geesepawn
        else if V(X,Y) == V(3, 5)
          then geesepawn
          else if V(X,Y) == V(4, 5)
            then geesepawn
            else if V(X,Y) == V(2, 6)
              then geesepawn
              else if V(X,Y) == V(3, 6)
                then geesepawn
                else if V(X,Y) == V(4, 6)
                  then geesepawn
                  else empty
      
  where X in 0..6, Y in 0..6
}

me : Player = fox

position : Position


// Automaton
graph move(me: Player) {
  forall p:Position {
    //if me == fox{
    check(p != null && board[p] == piece(me))
    //}
    //if me == geese{
    //check(p != null && board[p] == piece(me))
    //}
    board[p] = empty
    position = p //direction(me)(p)
    $ p
  }
  branch {
    check(board[position] == empty)
    $ F
  } or {
    branch {
      position = left(position)
      $ L
    } or {
      branch{
        position = right(position)
        $ R
      }
      or{
        position = down(position)
        $ D
      }
    }
    check(position != null)
    check(board[position] != piece[me])
  }
}

graph turn() {
  player = me
  move(me)
  board[position] = piece(me)
  player = keeper
  if not(reachable(move(opponent(me)))){// lis nie moze sie ruszyc a gesi nie maja pionkow
    goals[me] = 100
    goals[opponent(me)] = 0
    end()
  }
  me = opponent(me)
}

graph rules() {
  loop {
    turn()
  }
}
