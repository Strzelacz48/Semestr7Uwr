
task1_ledbtnv3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000212  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000212  000002a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000007e  00800060  00800060  000002a6  2**0
                  ALLOC
  3 .stab         00000720  00000000  00000000  000002a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000cf2  00000000  00000000  000009c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000016ba  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000016cc  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000420  00000000  00000000  00001708  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000003e8  00000000  00000000  00001b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00001f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000173  00000000  00000000  00001f2a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	1f c0       	rjmp	.+62     	; 0x42 <__bad_interrupt>
   4:	1e c0       	rjmp	.+60     	; 0x42 <__bad_interrupt>
   6:	1d c0       	rjmp	.+58     	; 0x42 <__bad_interrupt>
   8:	1c c0       	rjmp	.+56     	; 0x42 <__bad_interrupt>
   a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
   c:	1a c0       	rjmp	.+52     	; 0x42 <__bad_interrupt>
   e:	19 c0       	rjmp	.+50     	; 0x42 <__bad_interrupt>
  10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
  12:	17 c0       	rjmp	.+46     	; 0x42 <__bad_interrupt>
  14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
  16:	79 c0       	rjmp	.+242    	; 0x10a <__vector_11>
  18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
  1a:	13 c0       	rjmp	.+38     	; 0x42 <__bad_interrupt>
  1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
  1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
  20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
  2e:	20 e0       	ldi	r18, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
  36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
  38:	ae 3d       	cpi	r26, 0xDE	; 222
  3a:	b2 07       	cpc	r27, r18
  3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
  3e:	d7 d0       	rcall	.+430    	; 0x1ee <main>
  40:	e6 c0       	rjmp	.+460    	; 0x20e <_exit>

00000042 <__bad_interrupt>:
  42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <remember>:
volatile int memory[61];
volatile int i = 0;
volatile int j = 0;

void remember(){
    memory[i] = BTN_PIN;
  44:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <i>
  48:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <i+0x1>
  4c:	89 b3       	in	r24, 0x19	; 25
  4e:	90 e0       	ldi	r25, 0x00	; 0
  50:	ee 0f       	add	r30, r30
  52:	ff 1f       	adc	r31, r31
  54:	ec 59       	subi	r30, 0x9C	; 156
  56:	ff 4f       	sbci	r31, 0xFF	; 255
  58:	91 83       	std	Z+1, r25	; 0x01
  5a:	80 83       	st	Z, r24
    i++;
  5c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <i>
  60:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <i+0x1>
  64:	01 96       	adiw	r24, 0x01	; 1
  66:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <i+0x1>
  6a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <i>
    
    if (i == 61 || j > i){
  6e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <i>
  72:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <i+0x1>
  76:	cd 97       	sbiw	r24, 0x3d	; 61
  78:	b1 f0       	breq	.+44     	; 0xa6 <remember+0x62>
  7a:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  7e:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  82:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <i>
  86:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <i+0x1>
  8a:	82 17       	cp	r24, r18
  8c:	93 07       	cpc	r25, r19
  8e:	5c f0       	brlt	.+22     	; 0xa6 <remember+0x62>
            j++;
        }
        if(j >= 61)
            j = 0;
    }
    if(i >= 61)
  90:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <i>
  94:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <i+0x1>
  98:	cd 97       	sbiw	r24, 0x3d	; 61
  9a:	24 f0       	brlt	.+8      	; 0xa4 <remember+0x60>
        i = 0;
  9c:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <i+0x1>
  a0:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <i>
  a4:	08 95       	ret
void remember(){
    memory[i] = BTN_PIN;
    i++;
    
    if (i == 61 || j > i){
        if (_BV(BTN) & memory[j]){
  a6:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  aa:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  ae:	ee 0f       	add	r30, r30
  b0:	ff 1f       	adc	r31, r31
  b2:	ec 59       	subi	r30, 0x9C	; 156
  b4:	ff 4f       	sbci	r31, 0xFF	; 255
  b6:	80 81       	ld	r24, Z
  b8:	91 81       	ldd	r25, Z+1	; 0x01
  ba:	87 fd       	sbrc	r24, 7
  bc:	15 c0       	rjmp	.+42     	; 0xe8 <remember+0xa4>
            LED_PORT &= ~_BV(LED);
            j++;
        }
        else{
            LED_PORT |= _BV(LED);
  be:	c2 9a       	sbi	0x18, 2	; 24
            j++;
  c0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  c4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  c8:	01 96       	adiw	r24, 0x01	; 1
  ca:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  ce:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
        }
        if(j >= 61)
  d2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  da:	cd 97       	sbiw	r24, 0x3d	; 61
  dc:	cc f2       	brlt	.-78     	; 0x90 <remember+0x4c>
            j = 0;
  de:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  e2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  e6:	d4 cf       	rjmp	.-88     	; 0x90 <remember+0x4c>
    memory[i] = BTN_PIN;
    i++;
    
    if (i == 61 || j > i){
        if (_BV(BTN) & memory[j]){
            LED_PORT &= ~_BV(LED);
  e8:	c2 98       	cbi	0x18, 2	; 24
            j++;
  ea:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ee:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  f2:	01 96       	adiw	r24, 0x01	; 1
  f4:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  f8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  fc:	ea cf       	rjmp	.-44     	; 0xd2 <remember+0x8e>

000000fe <timer0_init>:

// inicjalizacja licznika 0
void timer0_init()
{
  // preskaler 64
  TCCR0B = _BV(CS01) | _BV(CS00);
  fe:	83 e0       	ldi	r24, 0x03	; 3
 100:	83 bf       	out	0x33, r24	; 51
  // odmaskowanie przerwania przepełnienia licznika
  TIMSK0 |= _BV(TOIE0);
 102:	89 b7       	in	r24, 0x39	; 57
 104:	81 60       	ori	r24, 0x01	; 1
 106:	89 bf       	out	0x39, r24	; 57
 108:	08 95       	ret

0000010a <__vector_11>:
}

// procedura obsługi przerwania przepełnienia licznika
ISR(TIM0_OVF_vect) {
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	2f 93       	push	r18
 116:	3f 93       	push	r19
 118:	8f 93       	push	r24
 11a:	9f 93       	push	r25
 11c:	ef 93       	push	r30
 11e:	ff 93       	push	r31
volatile int memory[61];
volatile int i = 0;
volatile int j = 0;

void remember(){
    memory[i] = BTN_PIN;
 120:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <i>
 124:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <i+0x1>
 128:	89 b3       	in	r24, 0x19	; 25
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	ee 0f       	add	r30, r30
 12e:	ff 1f       	adc	r31, r31
 130:	ec 59       	subi	r30, 0x9C	; 156
 132:	ff 4f       	sbci	r31, 0xFF	; 255
 134:	91 83       	std	Z+1, r25	; 0x01
 136:	80 83       	st	Z, r24
    i++;
 138:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <i>
 13c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <i+0x1>
 140:	01 96       	adiw	r24, 0x01	; 1
 142:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <i+0x1>
 146:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <i>
    
    if (i == 61 || j > i){
 14a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <i>
 14e:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <i+0x1>
 152:	cd 97       	sbiw	r24, 0x3d	; 61
 154:	01 f1       	breq	.+64     	; 0x196 <__vector_11+0x8c>
 156:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 15a:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 15e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <i>
 162:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <i+0x1>
 166:	82 17       	cp	r24, r18
 168:	93 07       	cpc	r25, r19
 16a:	ac f0       	brlt	.+42     	; 0x196 <__vector_11+0x8c>
            j++;
        }
        if(j >= 61)
            j = 0;
    }
    if(i >= 61)
 16c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <i>
 170:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <i+0x1>
 174:	cd 97       	sbiw	r24, 0x3d	; 61
 176:	24 f0       	brlt	.+8      	; 0x180 <__vector_11+0x76>
        i = 0;
 178:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <i+0x1>
 17c:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <i>
}

// procedura obsługi przerwania przepełnienia licznika
ISR(TIM0_OVF_vect) {
    remember();
}
 180:	ff 91       	pop	r31
 182:	ef 91       	pop	r30
 184:	9f 91       	pop	r25
 186:	8f 91       	pop	r24
 188:	3f 91       	pop	r19
 18a:	2f 91       	pop	r18
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti
void remember(){
    memory[i] = BTN_PIN;
    i++;
    
    if (i == 61 || j > i){
        if (_BV(BTN) & memory[j]){
 196:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 19a:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 19e:	ee 0f       	add	r30, r30
 1a0:	ff 1f       	adc	r31, r31
 1a2:	ec 59       	subi	r30, 0x9C	; 156
 1a4:	ff 4f       	sbci	r31, 0xFF	; 255
 1a6:	80 81       	ld	r24, Z
 1a8:	91 81       	ldd	r25, Z+1	; 0x01
 1aa:	87 fd       	sbrc	r24, 7
 1ac:	15 c0       	rjmp	.+42     	; 0x1d8 <__vector_11+0xce>
            LED_PORT &= ~_BV(LED);
            j++;
        }
        else{
            LED_PORT |= _BV(LED);
 1ae:	c2 9a       	sbi	0x18, 2	; 24
            j++;
 1b0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1b4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1b8:	01 96       	adiw	r24, 0x01	; 1
 1ba:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1be:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
        }
        if(j >= 61)
 1c2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1c6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1ca:	cd 97       	sbiw	r24, 0x3d	; 61
 1cc:	7c f2       	brlt	.-98     	; 0x16c <__vector_11+0x62>
            j = 0;
 1ce:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1d2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 1d6:	ca cf       	rjmp	.-108    	; 0x16c <__vector_11+0x62>
    memory[i] = BTN_PIN;
    i++;
    
    if (i == 61 || j > i){
        if (_BV(BTN) & memory[j]){
            LED_PORT &= ~_BV(LED);
 1d8:	c2 98       	cbi	0x18, 2	; 24
            j++;
 1da:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1de:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1e2:	01 96       	adiw	r24, 0x01	; 1
 1e4:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1e8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ec:	ea cf       	rjmp	.-44     	; 0x1c2 <__vector_11+0xb8>

000001ee <main>:
ISR(TIM0_OVF_vect) {
    remember();
}

int main() {
  BTN_PORT |= _BV(BTN);
 1ee:	df 9a       	sbi	0x1b, 7	; 27
  LED_DDR |= _BV(LED);
 1f0:	ba 9a       	sbi	0x17, 2	; 23

// inicjalizacja licznika 0
void timer0_init()
{
  // preskaler 64
  TCCR0B = _BV(CS01) | _BV(CS00);
 1f2:	83 e0       	ldi	r24, 0x03	; 3
 1f4:	83 bf       	out	0x33, r24	; 51
  // odmaskowanie przerwania przepełnienia licznika
  TIMSK0 |= _BV(TOIE0);
 1f6:	89 b7       	in	r24, 0x39	; 57
 1f8:	81 60       	ori	r24, 0x01	; 1
 1fa:	89 bf       	out	0x39, r24	; 57
  // zainicjalizuj licznik 0
  timer0_init();
  
  //set_sleep_mode();
  // odmaskuj przerwania
  sei();
 1fc:	78 94       	sei
  // program testowy
  while (1) {
    sleep_mode();
 1fe:	85 b7       	in	r24, 0x35	; 53
 200:	80 62       	ori	r24, 0x20	; 32
 202:	85 bf       	out	0x35, r24	; 53
 204:	88 95       	sleep
 206:	85 b7       	in	r24, 0x35	; 53
 208:	8f 7d       	andi	r24, 0xDF	; 223
 20a:	85 bf       	out	0x35, r24	; 53
 20c:	f8 cf       	rjmp	.-16     	; 0x1fe <main+0x10>

0000020e <_exit>:
 20e:	f8 94       	cli

00000210 <__stop_program>:
 210:	ff cf       	rjmp	.-2      	; 0x210 <__stop_program>
