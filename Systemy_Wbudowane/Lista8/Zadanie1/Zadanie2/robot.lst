
robot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000000e2  00000156  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000594  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c89  00000000  00000000  000006ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001375  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001388  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  000013c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  000019bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  00001f5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00001f78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 6f 00 	jmp	0xde	; 0xde <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define LED_PORT PORTD

//_BV(x) to shift 1 o x
int main() {
  //
    LED_DDR = 0xFF;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	8a b9       	out	0x0a, r24	; 10

  while (1) {
    for(int i = 0; i < 8; i++){
        LED_PORT = _BV(i);
  84:	21 e0       	ldi	r18, 0x01	; 1
  86:	30 e0       	ldi	r19, 0x00	; 0
int main() {
  //
    LED_DDR = 0xFF;

  while (1) {
    for(int i = 0; i < 8; i++){
  88:	80 e0       	ldi	r24, 0x00	; 0
  8a:	90 e0       	ldi	r25, 0x00	; 0
        LED_PORT = _BV(i);
  8c:	a9 01       	movw	r20, r18
  8e:	08 2e       	mov	r0, r24
  90:	01 c0       	rjmp	.+2      	; 0x94 <main+0x14>
  92:	44 0f       	add	r20, r20
  94:	0a 94       	dec	r0
  96:	ea f7       	brpl	.-6      	; 0x92 <main+0x12>
  98:	4b b9       	out	0x0b, r20	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	4f ef       	ldi	r20, 0xFF	; 255
  9c:	53 ed       	ldi	r21, 0xD3	; 211
  9e:	60 e3       	ldi	r22, 0x30	; 48
  a0:	41 50       	subi	r20, 0x01	; 1
  a2:	50 40       	sbci	r21, 0x00	; 0
  a4:	60 40       	sbci	r22, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x20>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <main+0x2a>
  aa:	00 00       	nop
int main() {
  //
    LED_DDR = 0xFF;

  while (1) {
    for(int i = 0; i < 8; i++){
  ac:	01 96       	adiw	r24, 0x01	; 1
  ae:	88 30       	cpi	r24, 0x08	; 8
  b0:	91 05       	cpc	r25, r1
  b2:	61 f7       	brne	.-40     	; 0x8c <main+0xc>
  b4:	87 e0       	ldi	r24, 0x07	; 7
  b6:	90 e0       	ldi	r25, 0x00	; 0
        LED_PORT = _BV(i);
        _delay_ms(1000);
    }
    for(int i = 7; i >= 0; i--){
        LED_PORT = _BV(i);
  b8:	a9 01       	movw	r20, r18
  ba:	08 2e       	mov	r0, r24
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <main+0x40>
  be:	44 0f       	add	r20, r20
  c0:	0a 94       	dec	r0
  c2:	ea f7       	brpl	.-6      	; 0xbe <main+0x3e>
  c4:	4b b9       	out	0x0b, r20	; 11
  c6:	4f ef       	ldi	r20, 0xFF	; 255
  c8:	53 ed       	ldi	r21, 0xD3	; 211
  ca:	60 e3       	ldi	r22, 0x30	; 48
  cc:	41 50       	subi	r20, 0x01	; 1
  ce:	50 40       	sbci	r21, 0x00	; 0
  d0:	60 40       	sbci	r22, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <main+0x4c>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x56>
  d6:	00 00       	nop
  while (1) {
    for(int i = 0; i < 8; i++){
        LED_PORT = _BV(i);
        _delay_ms(1000);
    }
    for(int i = 7; i >= 0; i--){
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	70 f7       	brcc	.-36     	; 0xb8 <main+0x38>
  dc:	d5 cf       	rjmp	.-86     	; 0x88 <main+0x8>

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
